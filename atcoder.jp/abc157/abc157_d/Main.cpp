#include <bits/stdc++.h>
using namespace std;

struct UnionFind
{
    vector<int> d; /* information about links */

    UnionFind(int n = 0) : d(n, -1) {}

    int find(int x)
    {
        if (d[x] < 0)
        {
            return x;
        }
        else
        {
            // return find(d[x]); /* naive */
            return d[x] = find(d[x]); /* path-shortened (memorized) */
        }
    }

    bool unite(int x, int y)
    {
        x = find(x);
        y = find(y);
        if (x == y)
        {
            return false;
        }
        else if (d[x] > d[y]) /* if the size associated with the node x is smaller than that of y */
        {
            swap(x, y);
        }
        d[x] += d[y]; /* refresh the size of the tree x */
        d[y] = x;     /* have y belong to the tree x */
        return true;
    }

    bool same(int x, int y)
    {
        return find(x) == find(y);
    }

    int size(int x)
    {
        return -d[find(x)];
    }
};

int deg[100005];
vector<int> to[100005];

void solve(int N, int M, int K, std::vector<int> A, std::vector<int> B, std::vector<int> C, std::vector<int> D)
{
    UnionFind uf(N);

    for (int i = 0; i < M; i++)
    {
        deg[A[i] - 1]++;
        deg[B[i] - 1]++;
        uf.unite(A[i] - 1, B[i] - 1);
    }

    for (int i = 0; i < K; i++)
    {
        to[C[i] - 1].push_back(D[i] - 1);
        to[D[i] - 1].push_back(C[i] - 1);
    }

    for (int i = 0; i < N; i++)
    {
        int ans = uf.size(i) - 1 - deg[i];
        for (int u : to[i])
        {
            if (uf.same(i, u))
            {
                --ans; /* delete if they were in a same cluster when they are blocking each other */
            }
        }
        printf("%d%c", ans, i == N - 1 ? '\n' : ' ');
    }
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    int N;
    scanf("%d", &N);
    int M;
    scanf("%d", &M);
    int K;
    scanf("%d", &K);
    std::vector<int> A(M);
    std::vector<int> B(M);
    for (int i = 0; i < M; i++)
    {
        scanf("%d", &A[i]);
        scanf("%d", &B[i]);
    }
    std::vector<int> C(K);
    std::vector<int> D(K);
    for (int i = 0; i < K; i++)
    {
        scanf("%d", &C[i]);
        scanf("%d", &D[i]);
    }
    solve(N, M, K, std::move(A), std::move(B), std::move(C), std::move(D));
    return 0;
}
