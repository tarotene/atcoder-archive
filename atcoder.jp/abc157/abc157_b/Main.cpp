#include <bits/stdc++.h>
using namespace std;

const string YES = "Yes";
const string NO = "No";

pair<int, int> search_bingo(std::vector<std::vector<int>> A, int val)
{
    for (size_t i = 0; i < 9; i++)
    {
        if (val == A[i / 3][i % 3])
        {
            return make_pair(i / 3, i % 3);
        }
    }

    return make_pair(3, 3);
}

void solve(std::vector<std::vector<int>> A, int N, std::vector<int> b)
{
    vector<vector<bool>> flag(3, vector<bool>(3, false));

    for (int i = 0; i < N; i++)
    {
        pair<int, int> index = search_bingo(A, b[i]);
        if (index != make_pair(3, 3))
        {
            flag[index.first][index.second] = true;
        }
    }

    bool bingo_horizon, bingo_vert, bingo_diag;

    bingo_horizon = (flag[0][0] == true && flag[0][1] == true && flag[0][2] == true);
    bingo_horizon = bingo_horizon || (flag[1][0] == true && flag[1][1] == true && flag[1][2] == true);
    bingo_horizon = bingo_horizon || (flag[2][0] == true && flag[2][1] == true && flag[2][2] == true);

    bingo_vert = (flag[0][0] == true && flag[1][0] == true && flag[2][0] == true);
    bingo_vert = bingo_vert || (flag[0][1] == true && flag[1][1] == true && flag[2][1] == true);
    bingo_vert = bingo_vert || (flag[0][2] == true && flag[1][2] == true && flag[2][2] == true);

    bingo_diag = (flag[0][0] == true && flag[1][1] == true && flag[2][2] == true);
    bingo_diag = bingo_diag || (flag[2][0] == true && flag[1][1] == true && flag[0][2] == true);

    if (bingo_horizon || bingo_vert || bingo_diag)
    {
        cout << "Yes" << endl;
    }
    else
    {
        cout << "No" << endl;
    }
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    std::vector<std::vector<int>> A(3, std::vector<int>(3));
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            cin >> A[i][j];
        }
    }
    int N;
    cin >> N;
    std::vector<int> b(N);
    for (int i = 0; i < N; i++)
    {
        cin >> b[i];
    }
    solve(std::move(A), N, std::move(b));
    return 0;
}
