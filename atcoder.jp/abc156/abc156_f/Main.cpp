#include <bits/stdc++.h>
using namespace std;

const long long MOD = 2;

long long divceil(long long a, long long b)
{
    return (a + b - 1) / b;
}

void solve(long long k, long long q, std::vector<long long> d, std::vector<long long> n, std::vector<long long> x, std::vector<long long> m)
{
    long long ans = 0LL;

    for (size_t i = 0; i < q; i++)
    {
        long long last = x[i], eq = 0;
        for (size_t j = 0; j < k; j++)
        {
            long long num = divceil(n[i] - 1 - j, k);
            last += (d[j] % m[i]) * num;
            if (d[j] % m[i] == 0)
            {
                eq += num;
            }
        }
        long long ans = (n[i] - 1) - (last / m[i] - x[i] / m[i]) - eq;
        cout << ans << endl;
    }
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    long long k;
    scanf("%lld", &k);
    long long q;
    scanf("%lld", &q);
    std::vector<long long> d(k - 1 - 0 + 1);
    for (int i = 0; i < k - 1 - 0 + 1; i++)
    {
        scanf("%lld", &d[i]);
    }
    std::vector<long long> n(q);
    std::vector<long long> x(q);
    std::vector<long long> m(q);
    for (int i = 0; i < q; i++)
    {
        scanf("%lld", &n[i]);
        scanf("%lld", &x[i]);
        scanf("%lld", &m[i]);
    }
    solve(k, q, std::move(d), std::move(n), std::move(x), std::move(m));
    return 0;
}
