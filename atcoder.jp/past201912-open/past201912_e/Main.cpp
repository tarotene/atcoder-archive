#include <bits/stdc++.h>
using namespace std;

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    int N = 0, Q = 0;
    cin >> N >> Q;

    vector<vector<char>> f(N + 1, vector<char>(N + 1, 'N'));

    for (int q = 0; q < Q; q++)
    {
        int iq = 0;
        cin >> iq;

        if (iq == 1)
        {
            int a = 0, b = 0;
            cin >> a >> b;

            f[a][b] = 'Y';
            // cout << a << " followed " << b << endl;
        }
        else if (iq == 2)
        {
            int a = 0;
            cin >> a;

            for (int i = 1; i <= N; i++)
            {
                if (f[i][a] == 'Y')
                {
                    f[a][i] = 'Y';
                    // cout << a << " followed " << i << endl;
                }
            }
        }
        else if (iq == 3)
        {
            int a = 0;
            cin >> a;

            set<int> cand;

            for (int i = 1; i <= N; i++)
            {
                for (int j = 1; j <= N; j++)
                {
                    if (f[a][j] == 'Y' && f[j][i] == 'Y')
                    {
                        cand.insert(i);
                    }
                }
            }

            for (const auto &e : cand)
            {
                f[a][e] = 'Y';
                // cout << a << " followed " << e << endl;
            }
        }
    }

    for (int i = 1; i <= N; i++)
    {
        f[i][i] = 'N';
        for (int j = 1; j <= N; j++)
        {
            cout << f[i][j];
        }
        cout << endl;
    }
    // for (size_t i = 1; i <= N; i++)
    // {
    //     for (size_t j = 1; j <= N; j++)
    //     {
    //         cout << f[i][j];
    //         // if (f[i][j] == 'Y' && followee[i].find(j) == followee[i].end())
    //         // {
    //         //     cout << "followee data is invalid" << endl;
    //         // }

    //         // if (f[i][j] == 'Y' && follower[j].find(i) == followee[j].end())
    //         // {
    //         //     cout << "follower data is invalid" << endl;
    //         // }
    //     }
    //     cout << endl;
    // }

    return 0;
}
