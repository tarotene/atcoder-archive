#include <bits/stdc++.h>
using namespace std;

void solve(const string S, const int K)
{
    int N = S.length(); /* digit of original "N" */
    // cout << "length of " << s << " is " << dig << endl;
    int dp[N + 1][K + 1][2];
    for (size_t i = 0; i < N + 1; i++)
    {
        for (size_t j = 0; j < K + 1; j++)
        {
            for (size_t k = 0; k < 2; k++)
            {
                dp[i][j][k] = 0;
            }
        }
    }

    dp[0][0][0] = 1; /* empty set */

    // cout << dp[1][1][0] << endl;

    for (size_t i = 0; i < N; i++)
    {
        for (size_t j = 0; j < K + 1; j++)
        {
            for (size_t k = 0; k < 2; k++)
            {
                int nd = S[i] - '0';
                for (size_t d = 0; d < 10; d++)
                {
                    int ni = i + 1, nj = j, nk = k;
                    if (d != 0)
                    {
                        nj++;
                    }
                    if (nj > K)
                    {
                        continue; /* out of bound */
                    }
                    if (k == 0)
                    {
                        if (d > nd)
                        {
                            continue; /* out of bound */
                        }
                        if (d < nd)
                        {
                            nk = 1;
                        }
                    }
                    dp[ni][nj][nk] += dp[i][j][k];
                }
            }
        }
    }
    cout << (dp[N][K][0] + dp[N][K][1]) << endl;
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    string S = "";
    int K = 0;
    cin >> S >> K;

    solve(S, K);
    return 0;
}
